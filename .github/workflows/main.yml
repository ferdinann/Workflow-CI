name: CI/CD MLflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  EXPERIMENT_NAME: Healthcare-Diabetes
  # Pastikan jalur ke CSV benar relatif terhadap root repositori Anda
  CSV_URL: MLProject/Dataset Preprocessing/Healthcare-Diabetes.csv
  TARGET_VAR: Outcome
  MLFLOW_TRACKING_URI: https://dagshub.com/ferdinantag8/Membangun_model.mlflow/

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Configure Git for Dagshub (jika diperlukan untuk MLflow)
      # Ini penting jika Dagshub membutuhkan Git credentials untuk MLflow
      # Pastikan secrets.DAGSHUB_TOKEN adalah Personal Access Token (PAT) dari Dagshub
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        # Jika repositori MLflow di Dagshub menggunakan git LFS atau repo privat, Anda mungkin perlu konfigurasi ini:
        # git config --global credential.https://dagshub.com.username ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        # git config --global credential.https://dagshub.com.password ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    - name: Install Base Dependencies (for MLflow CLI and Python project)
      run: |
        python -m pip install --upgrade pip
        pip install mlflow
        pip install python-dotenv # Jika Anda menggunakannya di MLProject atau skrip Python lainnya
        # Instal semua dependensi yang diperlukan oleh modelling.py Anda
        pip install -r MLProject/requirements.txt # Memastikan lingkungan lokal siap untuk MLProject

    - name: Run MLflow Project (Model Retraining)
      # Ini akan menjalankan modelling.py Anda dengan parameter yang diberikan
      # dan membuat run baru di MLflow Tracking Server.
      run: |
        mlflow run MLProject --env-manager=local --run-name rf_fixed_run \
        -P csv_url="${{ env.CSV_URL }}" \
        -P target_var="${{ env.TARGET_VAR }}"
      env:
        # Kredensial Dagshub harus diekspos sebagai env var untuk mlflow CLI
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }} # Atau MLFLOW_TRACKING_TOKEN

    - name: Get latest MLflow run_id
      # Mendapatkan ID run terbaru dari eksperimen untuk digunakan dalam langkah-langkah selanjutnya
      run: |
        echo "Getting latest run ID..."
        python <<EOF
        import mlflow
        import os
        from mlflow.tracking import MlflowClient

        # Set tracking URI and credentials programmatically for this script
        mlflow.set_tracking_uri(os.getenv("MLFLOW_TRACKING_URI"))
        os.environ["MLFLOW_TRACKING_USERNAME"] = os.getenv("MLFLOW_TRACKING_USERNAME")
        os.environ["MLFLOW_TRACKING_PASSWORD"] = os.getenv("MLFLOW_TRACKING_PASSWORD")

        client = MlflowClient()
        experiment = client.get_experiment_by_name(os.getenv("EXPERIMENT_NAME"))
        if experiment is None:
          raise Exception(f"Experiment '{os.getenv('EXPERIMENT_NAME')}' not found.")
        
        # Urutkan berdasarkan waktu mulai secara menurun untuk mendapatkan yang terbaru
        runs = client.search_runs(
            experiment_ids=[experiment.experiment_id], 
            order_by=["start_time DESC"], 
            max_results=1
        )
        if not runs:
          raise Exception("No runs found in the experiment.")
        
        run_id = runs[0].info.run_id
        print(f"Latest run ID: {run_id}")
        # Menyimpan RUN_ID ke variabel lingkungan GitHub Actions
        with open(os.environ["GITHUB_ENV"], "a") as f:
          f.write(f"RUN_ID={run_id}\n")
        EOF
      env:
        # Pastikan kredensial juga tersedia untuk skrip Python ini
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}


    - name: Generate Dockerfile for Model Deployment
      # Menggantikan 'mlflow models build-docker' yang deprecated
      # Ini akan membuat folder 'mlflow-dockerfile' dengan Dockerfile dan artefak model yang dibutuhkan
      run: |
        mlflow models generate-dockerfile \
          --model-uri "runs:/${{ env.RUN_ID }}/rf_best_model" \
          --output "mlflow-dockerfile"
      env:
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    - name: Build Docker Image
      # Masuk ke direktori yang dihasilkan dan bangun image Docker
      run: |
        cd mlflow-dockerfile
        docker build -t ${{ secrets.DOCKER_USERNAME }}/smls:latest .

    - name: Log in to Docker Hub
      # Menggunakan action GitHub untuk login ke Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image to Docker Hub
      # Mendorong image yang sudah dibangun dan diberi tag ke Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/smls:latest
